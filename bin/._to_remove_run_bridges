#!/usr/bin/env Rscript

library(optparse)
library(anndata)
library(dplyr)
library(ggplot2)
library(bridges)

# ---- Parse arguments ----
option_list <- list(
  make_option("--sample_id", type = "character", help = "Sample identifier"),
  make_option("--h5ad_path", type = "character", help = "Path to input h5ad file"),
  make_option("--cell_quality", type = "double", help = "Minimum quality threshold for cells"),
  make_option("--k_jitter_fix", type = "integer", help = "Jitter smoothing parameter"),
  make_option("--p_cut", type = "double", help = "P-value cutoff for BFB detection")
)

opt <- parse_args(OptionParser(option_list = option_list))

# ---- Functions ----
read_adata <- function(h5ad_path) {
  anndata::read_h5ad(h5ad_path)
}

filter_adata_by_cell_quality <- function(adata, cell_quality) {
  if (!"quality" %in% colnames(adata$obs)) {
    stop("Column 'quality' not found in AnnData object.")
  }
  high_quality_cells <- adata$obs[adata$obs$quality >= cell_quality, , drop = FALSE] %>% rownames()
  adata[high_quality_cells, ]
}

prepare_cna_df <- function(filtered_adata) {
  extract_bin_info <- function(bin) {
    info <- unlist(strsplit(bin, ":"))
    chr <- info[1]
    start_end <- unlist(strsplit(info[2], "-"))
    start <- as.numeric(start_end[1])
    end <- as.numeric(start_end[2])
    dplyr::tibble(chr = chr, start = start, end = end)
  }

  cell_ids <- rownames(filtered_adata$layers[["state"]])
  cna_data <- lapply(colnames(filtered_adata$layers[["state"]]), function(bin) {
    dplyr::bind_cols(
      extract_bin_info(bin),
      dplyr::tibble(cell_id = cell_ids, CN = filtered_adata$layers[["state"]][, bin])
    )
  }) %>% dplyr::bind_rows()

  return(cna_data)
}

plot_bfb_detection_report <- function(bridges_fit, cna_data, sample_id, p_cut, bfb_report_path) {
  bfb_detection <- bridges::detect_bfb(bridges_fit)
  bfb_detection$p.adj <- p.adjust(bfb_detection$p.value, method = "BH")
  bfb_detection$is.signif <- bfb_detection$p.adj <= p_cut

  bfbness_plot <- bfb_detection %>%
    dplyr::mutate(chr = factor(chr, levels = c(1:22, "X", "Y"))) %>%
    ggplot(mapping = aes(x = chr, y = mean, fill = is.signif)) +
    geom_col() +
    theme_bw() +
    labs(x = "Chromosome", y = "BFB-ness")

  significant.chrs <- bfb_detection %>%
    dplyr::filter(is.signif) %>%
    dplyr::pull(chr)

  pdf(bfb_report_path, width = 16, height = 9)
  print(bfbness_plot)
  if (length(significant.chrs) > 0) {
    for (chr in significant.chrs) {
      p <- plot_bfb_signature(res = bridges_fit, chr_of_interest = chr, allele_of_interest = "CN") +
        ggtitle(sample_id, subtitle = paste0("Chromosome ", chr))
      print(p)
    }
  }
  dev.off()
}

# ---- Create output dir ----
if (!dir.exists(opt$sample_id)) {
  dir.create(opt$sample_id, recursive = TRUE)
}

# ---- Pipeline execution ----
adata <- read_adata(opt$h5ad_path)
filtered_adata <- filter_adata_by_cell_quality(adata, cell_quality = opt$cell_quality)
cna_data <- prepare_cna_df(filtered_adata)

bridges_fit <- bridges::fit(cna_data, alleles = c("CN"), k_jitter_fix = opt$k_jitter_fix)
saveRDS(bridges_fit, file = file.path(opt$sample_id, "bridges_fit.rds"))

# Save heatmap
hm_plot <- bridges::plot_heatmap(cna_data, tree = bridges_fit$tree, use_raster = FALSE, ladderize = TRUE, to_plot = c("CN"))
pdf(file.path(opt$sample_id, "heatmap.pdf"), width = 12, height = 8)
print(hm_plot)
dev.off()

# Save BFB detection report
bfb_report_path <- file.path(opt$sample_id, "bfb_detection_report.pdf")
plot_bfb_detection_report(
  bridges_fit = bridges_fit,
  cna_data = cna_data,
  sample_id = opt$sample_id,
  p_cut = opt$p_cut,
  bfb_report_path = bfb_report_path
)
